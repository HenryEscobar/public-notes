#Video: https://www.youtube.com/watch?v=3c-iBn73dDE # great video

docker run postgres:9.6
docker ps -a

 docker run --rm -it ubuntu /bin/bash    			# shell on an ubuntu docker container. remove it when you exit
 docker run -it --network todo-app nicolaka/netshoot		# Need to fork and make my own!



Docker image === package and such . artificats and dockerfiles
docker container == Application actually running

A container is a running or stopped image 

Basic docker commands
docker pull  		: Pull image from repostorty 
docker start		: work with containers not images. 
docker run		: docker run -d <image>:tag    # Pull and run it. tag is option default == latest
docker stop		:
docker ps		: docker ps -a  # show all running or not.


Other commands
docker images		: list images that are cached
Restart a container	: docker ps; grab ID; docker stop <id> ; docker start <same_id> 


Docker useful command examples
docker run -dp 6000:6379 redis 	# startup redis image and map ports (-p) and detached/daemon (-d/)
dorck run -d -p6001:6379 --name redis-4.0 redis:4.0 # startup redis:4.0 w/ container name of redis-4.0

docker logs <id>		: see logs (da). id can be ID or Name
docker exec -it /bin/bash	: docker exec interactive terminal

# Cool network tool thing (no hping. :-()
#
docker run -it --network todo-app nicolaka/netshoot

# 
# Preping for development workflow / Ci
#
Code -> Commit -> Git -> Jenkins -> Docker -> Docker Repo (private) -> Dev/staging Server box

docker pull mongo
docker pull mongo-express
# net to setup a shared network betwewen them
docket network ls
docker network create mongo-network
# Read readme on docuker hub to know how to setup stuff and env variables
docker run -dp 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password \
		--name mongodb --net mongo-network mongo

docker run -dp 8081:8081 -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
		-e ME_CONFIG_MONGODB_ADMINPASSWORD=password  \
		-e ME_CONFIG_MONGODB_SERVER=mongodb \
		--name mongo-express --net mongo-network mongo-express


# bad image?
docker images
docker rmi <Image ID>
# shoot! it's a stopped container..
docker ps -a | grep <thing looking for>
docker rm <container_id>
# now image deletion will work
docker rmi <image_id>

# Build find out of Dockerfile in PWD
docker build -t my-app:1.0 .

$ docker exec -it 9f81cf9a17fa sh 
docker exec -it <container-id> sh


# Private remos can get very interesrting....
#
# use tags to include the registery address/domain to private repos
docker images 		#	 will list full repo when not using default dockerhub
docker push <full registory address>


sudo docker run hello-world
#


docker run -d -p 80:80 docker/getting-started	# -d == run in background. forwardp port 80 to 80. docker image
# Make sure it is in the app subdir w/ the package.json file
cat > Dockerfile << EOF
  FROM node:12-alpine
  RUN apk add --no-cache python g++ make # I had to run this on seperate lines due to error... 
  WORKDIR /app
  COPY . .
  RUN yarn install --production
  CMD ["node", "src/index.js"]
EOF
 
docker build -t getting-started .

docker run -dp 3000:3000 getting-started

# replace container: after update
docker ps
docker stop <container-id>
docker rm <container id>
# pro-tip to replace two commands above:
docker rm -f <the-container-id>  # Stop and remove in one line
docker run -dp 3000:3000 getting-started

# visit docker hub and create a repo
# https://hub.docker.com/
# docker push hankinnyc/tutorial:tagname created

docker push hankinnyc/getting-started:tagname # error. no image. need to tag image first!
# login to docker hub
docker login -u  hankinnyc

docker tag getting-started hankinnyc/getting-started
docker push hankinnyc/getting-started

###
## nopw to the lab to pl;ay?
#
# Neat site
#https://labs.play-with-docker.com/

docker run -dp 3000:3000 hankinnyc/getting-started


# Persistant storage
docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"

# docker ps to get name:
# shell on running docker container
docker exec -ti <container_name> /bin/bash

docker exec <container-id> cat /data.txt

# named volumes
docker volume create todo-db
# dockr rm -f old container since not using a named volume/persistant data
docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started # -v == volume mount

# pro-tip many volume drivers liek nfs/sft/netapp to support other backends besides local disk

docker volume inspect todo-db


# Dev nmode container (for code development and rapid changes)
#		mount as a volome the pwd/app to /app in teh docker container
docker run -dp 3000:3000 \
    -w /app -v "$(pwd):/app" \
    node:12-alpine \
    sh -c "yarn install && yarn run dev"



docker logs -f <container-id>
# hack away and when done: to build new container
docker build -t getting-started .


$ docker push docker/getting-started
docker tag getting-started YOUR-USER-NAME/getting-started
docker push YOUR-USER-NAME/getting-started


# very cool site: http://play-with-docker.com/
docker run -dp 3000:3000 YOUR-USER-NAME/getting-started

docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"
cat /data.txt
docker exec <container-id> cat /data.txt
docker run -it ubuntu ls /


# persisting data
docker volume create todo-db
docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started
docker ps
docker rm -f <id>

#
#Pro-tip 
# While named volumes and bind mounts (which we'll talk about in a minute) are the two main types of volumes supported by a default Docker engine installation, there are many volume driver plugins available to support NFS, SFTP, NetApp, and more! This will be especially important once you start running containers on multiple hosts in a clustered environment with Swarm, Kubernetes, etc.
 
docker volume inspect todo-db

## Dev mode container for easy dev / reload
docker run -dp 3000:3000 \
    -w /app -v "$(pwd):/app" \
    node:12-alpine \
    sh -c "yarn install && yarn run dev"

docker logs -f <container-id>

# Stop- conatiner and push out a new image:
docker build -t getting-started .


# Myusql db time
#
docker build -t getting-started 

docker run -d \
    --network todo-app --network-alias mysql \
    -v todo-mysql-data:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=secret \
    -e MYSQL_DATABASE=todos \
    mysql:5.7


docker exec -it <mysql-container-id> mysql -p
mysql> SHOW DATABASES;



# Cool network tool thing (no hping. :-()
#
docker run -it --network todo-app nicolaka/netshoot
dig mysql # you chose this dns name when you started up mysql w/ --network-alias


# hack w/ env vars. don't do this in prod:
#    https://diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/
#
docker run -dp 3000:3000 \
  -w /app -v "$(pwd):/app" \
  --network todo-app \
  -e MYSQL_HOST=mysql \
  -e MYSQL_USER=root \
  -e MYSQL_PASSWORD=secret \
  -e MYSQL_DB=todos \
  node:12-alpine \
  sh -c "yarn install && yarn run dev"


docker logs <container-id>
docker exec -it <mysql-container-id> mysql -p todos
select * from todo_items;


# Using docker compose
#
## Translate these to this 'micro-service' defiition
#   docker run -dp 3000:3000 -w /app -v "$(pwd):/app" --network todo-app MYSQL_HOST=mysql \
#      -e MYSQL_USER=root -e MYSQL_PASSWORD=secret -e MYSQL_DB=todos node:12-alpine \ 
#      sh -c "yarn install && yarn run dev"
#   docker run -d --network todo-app --network-alias mysql -v todo-mysql-data:/var/lib/mysql \
#	-e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=todos mysql:5.7



cat docker-compose.yml << EOF
version: "3.7"

services:
  app:
    image: node:12-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:5.7
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:

<< EOF

# kill runnning containers via:
docker rm -f <container_id>


docker-compose up -d ## magic!
docker-compose logs -f
docker-compose down
#named volumes in your compose file are NOT removed with docker-compose down. add --volumes flag 2 do so
#


# Best practices: http://localhost/tutorial/image-building-best-practices/
#

docker scan getting-started
docker image history getting-started
docker image history --no-trunc getting-started

# When defining order of stuff try to minimize change impacts. -> maximize layer caching
# #  eg. load package.json first, then install tsince those change less
# use .dockerignore to skip things like node_modules
docker build -t getting-started .

